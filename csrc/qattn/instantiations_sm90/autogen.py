import os
from itertools import product

# Parameters to sweep
CTA_Qs = [64]
CTA_Ks = [128]
NUM_THREADS = [128]  # Fixed for now
head_dims = [64, 128]
qk_quant_grans = [2, 3]
dtypes = ["half", "nv_bfloat16"]
is_causals = [True, False]
return_lses = [True, False]
fuse_v_scales = [True, False]

# Output directory
output_dir = os.path.dirname(os.path.abspath(__file__))

script_name = os.path.basename(__file__)
header = f'// this file is automatically generated by running `python {script_name}`\n#include "../qk_int_sv_f8_cuda_sm90.cuh"\n'

def bool_to_int(b):
    return "1" if b else "0"

# Full function parameter list with names
param_list = (
    "  int8_t* Q, int8_t* K, __nv_fp8_e4m3* V, {dtype}* O, float* Lse,\n"
    "  float* Q_scale, float* K_scale, float* V_scale,\n"
    "  const uint32_t batch_size, const uint32_t qo_len, const uint32_t kv_len, const uint32_t padded_kv_len, const uint32_t num_qo_heads, const uint32_t num_kv_heads,\n"
    "  const uint32_t stride_bz_q, const uint32_t stride_seq_q, const uint32_t stride_h_q,\n"
    "  const uint32_t stride_bz_k, const uint32_t stride_seq_k, const uint32_t stride_h_k,\n"
    "  const uint32_t stride_bz_v, const uint32_t stride_h_v, const uint32_t stride_d_v,\n"
    "  const uint32_t stride_bz_o, const uint32_t stride_seq_o, const uint32_t stride_h_o,\n"
    "  float sm_scale\n"
)

# Generate all combinations
for cta_q, cta_k, hd, qkg, dtype, causal, lse, fuse in product(
        CTA_Qs, CTA_Ks, head_dims, qk_quant_grans, dtypes, is_causals, return_lses, fuse_v_scales):

    filename = (
        f"inst_sm90_ctaq{cta_q}_ctak{cta_k}_hd{hd}_qkg{qkg}_o{dtype}_"
        f"causal{bool_to_int(causal)}_lse{bool_to_int(lse)}_fv{bool_to_int(fuse)}.cu"
    )
    filepath = os.path.join(output_dir, filename)

    instantiation = (
        f"template void SageAttentionSM90Dispatched<"
        f"{cta_q}, {cta_k}, 128, {hd}, {qkg}, {dtype}, "
        f"{str(causal).lower()}, {str(lse).lower()}, {str(fuse).lower()}"
        f">(\n{param_list.format(dtype=dtype)});"
    )

    with open(filepath, "w") as f:
        f.write(header)
        f.write(instantiation + "\n")

print(f"Generated {len(os.listdir(output_dir))} instantiations in '{output_dir}'")
